## Docker能做什么?

Docker可以解决虚拟机能够解决的问题,同时也能够解决虚拟机由于资源要求过高而无法解决的问题.

* 隔离应用依赖
* 创建应用镜像并进行复制
* 创建容易分发的即启即用的应用
* 允许实例简单、快速地扩展
* 测试应用并随后销毁它们

创建软件程序可移植的轻量容器


## Docker究竟做了什么？

### 镜像和容器

镜像：类似虚拟机的快照，但更**轻**量。在公共镜像拥有大部分你所要的基础镜像，你可以在此镜像上做修改构建自己的镜像，当然你也可以从头构建自己的镜像。

容器：你可以通过镜像创建容器，相当于在快照创建虚拟机，更**轻**量，应用是由容器运行的。

![Alt text](images/pic1.png)

容器和虚拟机相比有个很大的差异，它们被设计用来运行的单进程，Docker设计者极力推崇“一个容易一个进程的方式”。

容器是被设计来运行一个应用，而非一台机器，Docker提供了用于分离应用与数据的工具

### 链接和数据卷

数据卷：让你可以不受容器生命周期影响进行数据持久化，它保存在容器之外，从而允许你不在影响数据的情况下销毁、重建、修改、丢弃容器。使用Docker需要做出最大的思维变化之一就是：容器应该时短暂和一次性的

卷保存在Docker宿主文件系统上，你可以指定存放路径，会存放目录位置。

![Alt text](images/pic2.png)


链接：容器启动时，将被分配一个随机的私有IP,　其他容器就可以使用这个IP地址进行通讯。Docker允许你创建一个新容器时应用其他现存容器，你将获得引用该容器的别名，也即这两个容器链接在一起了。

## Docker镜像的可可移植性

Docker允许你在一个镜像中指定卷和端口。从这个镜像创建的容器继承了这些设置。但是，Docker不允许你在镜像上指定任何不可移植的内容。

## Docker是怎么办到的

cgroups和union文件系统,cgroup容器隔离，union文件系统用于保存镜像

### Cgroups

Linux内核功能。

* 限制Linux进程组的资源占用（内存，CPU）
* 为进程组制作PID、UTS（UNIX Timesharing System）、IPC、网络、用户及装载命名空间

这里关键点命名空间

### Union文件系统

Union文件系统允许通过union装载来达到一个分层的积累变化。

![Alt text](images/pic3.png)


## 快速入门

### 安装

    which wget
    sudo apt-get update $ sudo apt-get install wget
    wget -qO- https://get.docker.com/ | sh
    service docker start
    
### Hello World

    docker run hello-world
    
### 列出你的镜像

    docker images

    # docker images
    REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
    hello-world         latest              af340544ed62        3 weeks ago         960 B
    
### 下载镜像
    
    docker pull ubuntu:latest

公共registry上有你需要的几乎所有东西的镜像：Ubuntu、Fedora、Postgresql、MySQL、Jenkins、Elasticsearch、Redis等等

### 镜像上创建一个容器

    # docker run --rm -ti ubuntu /bin/bash
    
* --rm：告诉Docker一旦运行的进程退出就删除容器。这在进行测试时非常有用，可免除杂乱
* -ti：告诉Docker分配一个伪终端并进入交互模式。这将进入到容器内，对于快速原型开发或尝试很有用，但不要在生产容器中打开这些标志
* ubuntu: 镜像名
* bin/bash：要运行的命令，因为我们以交互模式启动，它将显示一个容器的提示符

在执行run命令时，你可以指定链接，卷，端口，窗口名称等。

### 在后台执行容器

    # docker run -d ubuntu ping 8.8.8.8
    929362f586c7c903e99f05aaaf4bd9126bb9e064e99c7635cfab884f1bdb6df6    

执行后将会随机分配一个ID.

你可以通过如下检测是否运行：

    # docker ps
    CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
    929362f586c7        ubuntu              "ping 8.8.8.8"      46 seconds ago      Up 44 seconds                           tender_wozniak

我们发现执行时没有指明窗口名称，docker给我们自动分配了个**tender_wozniak**名字。

我们进行看看它在干嘛

    # docker exec -ti tender_wozniak /bin/bash
    # ps -aux | grep ping                                                                                                                                    
    root         1  0.0  0.0   6508   732 ?        Ss   06:15   0:00 ping 8.8.8.8

### 结束后台任务

    # docker kill 929362f586c7

## Linux命名空间

### UTS

Docker核心其实就是通过LXC(LinuX Container)实现类型VM的功能

LXC隔离主要是来自内核的命名空间，其中pid, net, ipc, mnt, uts等命名空间将容器的进程，网络，消息，文件系统和宿主个离开。

LXC就似一个增强版的Chroot。Chroot是将应用隔离到一个虚拟的私有root下

LXC内部依赖Linux内核的３种隔离机制：

1. Chroot
2. Cgroups
3. Namespaces

Linux 3.12内核支持６种Namespace:

1. UTS: hostname
2. IPC: 进程间通信
3. PID: chroot进程树
4. NS: 挂载点，首次登陆Linux
5. NET: 网络访问，包括接口
6. User: 将本地的虚拟user-id映射到真是的user-id

#### 我们第一个container

    #define _GNU_SOURCE
    #include <sys/types.h>
    #include <sys/wait.h>
    #include <stdio.h>
    #include <sched.h>
    #include <signal.h>
    #include <unistd.h>
    
    #define STACK_SIZE (1024 * 1024)
    
    static char child_stack[STACK_SIZE];
    char *const child_args[] = {
      "/bin/bash",
      NULL
    };
    
    int child_main(void *arg) {
      printf(" - World!\n");
      execv(child_args[0], child_args);
      printf("Ooops\n");
      return 1;
    }
    
    int main(int argc, char *argv[])
    {
      printf(" - Hello?\n");
      int child_pid = clone(child_main, child_stack + STACK_SIZE,
                            SIGCHLD, NULL);
      waitpid(child_pid, NULL, 0);
      return 0;
    }



    $ gcc -Wall main.c -o ns
    hewx@hewx:~/下载/books/virualization/examples$ ./ns 
     - Hello?
     - World!
     $ echo "inside container"
     $ exit (Ctrl + D)
     $ echo "outside container"

如果我们在container里修改hostname，是不是很cool

    #define _GNU_SOURCE
    #include <sys/types.h>
    #include <sys/wait.h>
    #include <stdio.h>
    #include <sched.h>
    #include <signal.h>
    #include <unistd.h>
    
    #define STACK_SIZE (1024 * 1024)
    
    static char child_stack[STACK_SIZE];
    char *const child_args[] = {
      "/bin/bash",
      NULL
    };
    
    int child_main(void *arg) {
      printf(" - World!\n");
      sethostname("In Namespace", 12);
      execv(child_args[0], child_args);
      printf("Ooops\n");
      return 1;
    }
    
    int main(int argc, char *argv[])
    {
      printf(" - Hello?\n");
      int child_pid = clone(child_main, child_stack + STACK_SIZE,
                            CLONE_NEWUTS | SIGCHLD, NULL);
      waitpid(child_pid, NULL, 0);
      return 0;
    }

    root@hewx:~/examples# gcc -Wall main.c -o ns
    root@hewx:~/examples# sudo ./ns 
     - Hello?
     - World!
    root@In Namespace:~/examples# 

### IPC

IPC(Inter-Process Communications, 进程间通信)

要激活IPC namespace,　只需要把"CLONE_NEWPIC"标记添加到"clone"调用中。一旦激活，你就可以像往常一样
创建IPC

可是“父进程”和“子进程”不时隔离的吗？那么如何让它们通信？

幸运的是，并非所有的东西隔离的，clone和它的parent分享内存空间。

所以你依旧可以使用：

* 信号(signal)
* poll内存
* 套接字(sockets)
* 使用文件(file)和文件描述符(fd)


我们使用pipe

    #include <unistd.h>
    
    int checkpoint[2];
    pipe(checkpoint);


    #define _GNU_SOURCE
    #include <sys/types.h>
    #include <sys/wait.h>
    #include <stdio.h>
    #include <sched.h>
    #include <signal.h>
    #include <unistd.h>
    
    #define STACK_SIZE (1024 * 1024)
    
    // sync primitive
    int checkpoint[2];
    static char child_stack[STACK_SIZE];
    char * const child_args[] = {
      "/bin/bash",
      NULL
    };
    
    int child_main(void *arg)
    {
      char c;
      // init sync primitive
      close(checkpoint[1]);
      // wait...
      read(checkpoint[0], &c, 1);
      printf(" - World!\n");
      sethostname("In Namespace", 12);
      execv(child_args[0], child_args);
      printf("Ooops\n");
      return 1;
    }
    
    int main(int argc, char *argv[])
    {
      // init sync primitive
      pipe(checkpoint);
      printf(" - Hello?\n");
      int child_pid = clone(child_main, child_stack+STACK_SIZE,
                            CLONE_NEWUTS | CLONE_NEWIPC | SIGCHLD, NULL);
      // some damn long init job
      sleep(4);
      // signal "done"
      close(checkpoint[1]);
      waitpid(child_pid, NULL, 0);
      return 0;
    }


    $ sudo ./main-2-ipc
     - Hello?
     // sleep for 4s
     - World!


这里原理是parent一个close事件，child读取等待"EOF"接收，并且接收时所有的写fd都必须被关闭。


### PID

通过这个namespace我们将由可能重置PID计数，得到自己的“1"进程。

要激活PID namespace，只需要把"CLONE_NEWPID"标记添加到"clone"调用。

一旦激活，子进程getpid()的返回结果将为"1"

但是这不时有两个"1"进程了？那么进程管理怎么搞?　事实上这还关系到进程可见

* Host: 所有进程可见的，全局的PIDS(init=1, ..., child=xxx, ...)
* Container: 只有child + descendant(后代)可见，本地PIDS(child=1, ...)

看看代码


    #define _GNU_SOURCE
    #include <sys/types.h>
    #include <sys/wait.h>
    #include <stdio.h>
    #include <sched.h>
    #include <signal.h>
    #include <unistd.h>
    
    #define STACK_SIZE (1024 * 1024)
    
    // sync primitive
    int checkpoint[2];
    static char child_stack[STACK_SIZE];
    char * const child_args[] = {
      "/bin/bash",
      NULL
    };
    
    int child_main(void *arg)
    {
      char c;
      // init sync primitive
      close(checkpoint[1]);
      // wait...
      read(checkpoint[0], &c, 1);
      printf(" - [%5d] World!\n", getpid());
      sethostname("In Namespace", 12);
      execv(child_args[0], child_args);
      printf("Ooops\n");
      return 1;
    }
    
    int main(int argc, char *argv[])
    {
      // init sync primitive
      pipe(checkpoint);
      printf(" - [%5d] Hello?\n", getpid());
      int child_pid = clone(child_main, child_stack+STACK_SIZE,
                      CLONE_NEWUTS | CLONE_NEWIPC |
                      CLONE_NEWPID | SIGCHLD, NULL);
      // futher init here (nothing yet)
      // signal "done"
      close(checkpoint[1]);
      waitpid(child_pid, NULL, 0);
      return 0;
    }
    
    
    
    $ sudo ./ns 
     - [14509] Hello?
     - [    1] World!
    
可是为什么我又能在隔离的子进程看到宿主进程信息，你哄我吧？

    # ps -ef 
    UID        PID  PPID  C STIME TTY          TIME CMD
    root         1     0  0 09:28 ?        00:00:01 /sbin/init splash
    root         2     0  0 09:28 ?        00:00:00 [kthreadd]
    root         3     2  0 09:28 ?        00:00:00 [ksoftirqd/0]
    root         5     2  0 09:28 ?        00:00:00 [kworker/0:0H
    ...
    
因为这些工具时从/proc文件系统获取的信息,而且该文件尚未隔离，我们可以这样搞

    # mkdir -p proc
    root@In Namespace:~/examples# mount -t proc proc
    root@In Namespace:~/examples# ls
    # ps -ef
    UID        PID  PPID  C STIME TTY          TIME CMD
    root         1     0  0 17:40 pts/8    00:00:00 /bin/bash
    root        16     1  0 17:42 pts/8    00:00:00 ps -ef

现在看不到了,下节我们使用NS来实现这一点

### NS

现在我们看看如何：隔离挂载表(mount table)

前面我们用"chrooted"了PID namespace并且得到了一个"１“进程。但是，我还是没能隔离"top"等工具，因为这些都依赖"/proc"文件系统，该文件系统却依然被namespace之间共享。

要激活NS namespace，只需要把"CLONE_NEWNS"标记添加到"clone"中，一旦激活，任何子进程的挂载和卸载操作都将只作用于本身，反之亦然。

    
    #define _GNU_SOURCE
    #include <sys/types.h>
    #include <sys/wait.h>
    #include <sys/mount.h>
    #include <stdio.h>
    #include <sched.h>
    #include <signal.h>
    #include <unistd.h>
    
    #define STACK_SIZE (1024 * 1024)
    
    // sync primitive
    int checkpoint[2];
    static char child_stack[STACK_SIZE];
    char * const child_args[] = {
      "/bin/bash",
      NULL
    };
    
    int child_main(void *arg)
    {
      char c;
      // init sync primitive
      close(checkpoint[1]);
      printf(" - [%5d] World!\n", getpid());
      sethostname("In Namespace", 12);
      // remount "/proc" to get accurate "top" && "ps" output
      mount("proc", "/proc", "proc", 0, NULL);
      // wait...
      read(checkpoint[0], &c, 1);
      execv(child_args[0], child_args);
      printf("Ooops\n");
      return 1;
    }
    
    int main(int argc, char *argv[])
    {
      // init sync primitive
      pipe(checkpoint);
      printf(" - [%5d] Hello?\n", getpid());
      int child_pid = clone(child_main, child_stack+STACK_SIZE,
                      CLONE_NEWUTS | CLONE_NEWIPC |
                      CLONE_NEWPID | CLONE_NEWNS |
                      SIGCHLD, NULL);
      // futher init here (nothing yet)
      // signal "done"
      close(checkpoint[1]);
      waitpid(child_pid, NULL, 0);
      return 0;
    }

现在我们不就不需要手动重新挂载"/proc"了。


### NET

现在我们学习如何隔离网络接口

iproute2 - 网管的瑞士军刀


    $ sudo ip link list
    1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default 
        link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP mode DEFAULT group default qlen 1000
        link/ether 14:dd:a9:27:80:49 brd ff:ff:ff:ff:ff:ff
    

创建网络namespace

    $ sudo ip netns add demo

查看该接口

    $ sudo ip netns exec demo ip link list
    1: lo: <LOOPBACK> mtu 65536 qdisc noop state DOWN mode DEFAULT group default 
        link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    
存有个状态为"DOWN"的loopback，且于主loopback隔离。也就是说只有在该namespace内的应用可以进行通讯。

但是不通namespace之间如何通讯呢？

最简单的方式是，在"Host"和"Guest"之间创建一个点对点管道。Linux kernel提供了多种替代品，LXC使用用的是"veth"接口。

    $ sudo ip netns add demo
    $ sudo ip link add veth0 type veth peer name veth1
    $ sudo ip link set veth1 netns demo
    $ sudo ip netns exec demo ip link set lo up
    $ sudo ip netns exec demo ip link set veth1 up
    $ sudo ip netns exec demo ip addr add 169.254.1.2/30 dev veth1
   
要让"veth"技术在"guest"联网，那么需要"NAT"，为了可以宿主端口转到"guest"那么就可以使用"DNAT"

    $ sudo echo 1 > /proc/sys/net/ipv4/ip_forward
    $ sudo iptables -t nat -A POSTROUTING -i veth0 -j MASQUERADE
    $ sudo iptables -t nat -A PREROUTING -d <your main ip>/32 -p tcp --dport 80 -j DNAT --to-destination 169.254.1.2:80
    
我们现在将CLONE_NEWNET添加到clone调用中，为了简化，我们通过system()直接调用"ip"。


    #define _GNU_SOURCE
    #include <sys/types.h>
    #include <sys/wait.h>
    #include <sys/mount.h>
    #include <stdio.h>
    #include <sched.h>
    #include <signal.h>
    #include <unistd.h>
    #include <stdlib.h>
    
    #define STACK_SIZE (1024 * 1024)
    
    // sync primitive
    int checkpoint[2];
    static char child_stack[STACK_SIZE];
    char * const child_args[] = {
      "/bin/bash",
      NULL
    };
    
    int child_main(void *arg)
    {
      char c;
      // init sync primitive
      close(checkpoint[1]);
      printf(" - [%5d] World!\n", getpid());
      sethostname("In Namespace", 12);
      mount("proc", "/proc", "proc", 0, NULL);
      // wait...
      read(checkpoint[0], &c, 1);
      // setup network
      system("ip link set lo up");
      system("ip link set veth1 up");
      system("ip addr add 169.254.1.2/30 dev veth1");
      execv(child_args[0], child_args);
      printf("Ooops\n");
      return 1;
    }
    
    int main(int argc, char *argv[])
    {
      // init sync primitive
      pipe(checkpoint);
      printf(" - [%5d] Hello?\n", getpid());
      int child_pid = clone(child_main, child_stack+STACK_SIZE,
                      CLONE_NEWUTS | CLONE_NEWIPC |
                      CLONE_NEWPID | CLONE_NEWNS  |
                      CLONE_NEWNET | SIGCHLD, NULL);
      // futher init here (nothing yet)
      char *cmd;
      asprintf(&cmd, "ip link set veth1 netns %d", child_pid);
      system("ip link add veth0 type veth peer name veth1");
      system(cmd);
      system("ip link set veth0 up");
      system("ip addr add 169.254.1.1/30 dev veth0");
      free(cmd);
      // signal "done"
      close(checkpoint[1]);
      waitpid(child_pid, NULL, 0);
      return 0;
    }




    $ sudo ./ns 
     - [31400] Hello?
     - [    1] World!


    root@In Namespace:~/examples# nc -l 4242
    hi
    By

    //　另外开个窗口
    $ nc 169.254.1.2 4242
    hi
    By
    
