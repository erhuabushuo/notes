## Ext  JS 快速入门

### 为什么用Ext JS

* 跨浏览器支持
* 富UI组件(data grid, tree controls, date picker, charts, and ...)
* 双向绑定
* 针对JavaScript架构模式
* 复杂操作简单化
* 简单DOM访问
* 客户端路由(SPA)
* 可见性

### 介绍 Ext JS

Ext JS 提供一站式富UI应用构建环境。提供了 MVC, MVVM, 双向绑定，跨浏览器支持，路由，大量的富UI组件，图标等等。

由Jack Slocum构建于YUI扩展，现在所有Sencha Inc产品。

Ext JS 6 最大的变化是合并了两个框架： Ext JS 和 Sencha Touch

### 设置 Ext JS

#### 安装 Sencha Cmd

    wget http://cdn.sencha.com/cmd/6.0.0.202/no-jre/SenchaCmd-6.0.0.202-linux-amd64.sh.zip
    unzip SenchaCmd-6.0.0.202-linux-amd64.sh.zip
    ./SenchaCmd-6.0.0.202-linux-amd64.sh
    ls ~/bin/Sencha/
    export PATH=/home/hewx/bin/Sencha/Cmd/:$PATH

### 创建 Ext JS 应用

    sencha generate app --ext MyApp ./myapp
    
创建MyApp应用并放在myapp目录下

    上面创建的应用将包含两个工具:classic 和 modern，如果你只想其中一个可以使用--modern或者--classic
    
启动

    cd myapp
    sencha app watch
    
访问

    http://localhost:1842
    
默认显示classic,通过?profile=modern切换为modern

### 应用架构

Ext JS 提供了两种应用架构MVC, MVVM

#### Model

数据层，包含数据验证，数据持久化逻辑。在Ext JS,　大部分model和data store一起使用。

#### View

呈现用户界面。例如button, form, messagebox

#### Controller

处理视图相关逻辑，事件处理，应用逻辑。

#### View Model

包装view呈现逻辑，绑定数据到view, 数据更改时处理更新。


app.js

    Ext.application({
        name: 'MyApp',  // 定义应用名称
    
        extend: 'MyApp.Application',  // 定义在app目录下的Application.js里头
    
        requires: [
            'MyApp.view.main.Main'
        ],
    
        mainView: 'MyApp.view.main.Main'
    	
    });

在Application.js你可以看到如下


    Ext.define('MyApp.Application', {
        extend: 'Ext.app.Application',
        
        name: 'MyApp',
    
        stores: [
            // TODO: add global / shared stores here
        ],
        
        launch: function () {
            // TODO - Launch the application
        }
    });
    
我们可以看到MyApp.Application继承Ext.app.Application. lauch函数定义在Ext.app.Application。该函数在页面加载后调用

#### MainModel.js

看看\app\view\main\下的MainModel.js.该累时针对应用程序main视图的view model.继承Ext.app.ViewModel


    Ext.define('MyApp.view.main.MainModel', {
        extend: 'Ext.app.ViewModel',
    
        alias: 'viewmodel.main',
    
        data: {
            name: 'MyApp',
    
            loremIpsum: 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.'
        }
    
        //TODO - add data, formulas and/or methods to support your view
    });
    
#### MainController.js

针对main视图的控制器。onItemSelected函数在选项选择的时候会执行

    Ext.define('MyApp.view.main.MainController', {
        extend: 'Ext.app.ViewController',
    
        alias: 'controller.main',
    
        onItemSelected: function (sender, record) {
            Ext.Msg.confirm('Confirm', 'Are you sure?', 'onConfirm', this);
        },
    
        onConfirm: function (choice) {
            if (choice === 'yes') {
                //
            }
        }
    });

有两种控制器: Ext.app.ViewController和Ext.app.Controller

#### Main.js

\modern\src\view\main\和\classic\src\view\main\下

我们看看modern下的，该view定义了controller, viewModel, 以及其他依赖类。创建了四个tabs，绑定了viewModel的loremIpsum属性

再看看classic下的，大部分是一样的，有个配置时针对responsive设计的ui: 'navigation'

### 学习Sencha Cmd命令

#### 格式

    sencha [category] [command] [options...] [arguments…]

#### 帮助

    sencha help
    
#### 更新

    sencha upgrade --check
    sencha upgrade
    
#### 创建应用

    sencha -sdk /path/to/sdk generate app [--modern/classic] MyApp /path/to/myapp

#### 构建应用

    sencha app build
    sencha app build modern
    sencha app build classic
    
#### 启用应用

    sencha app watch
    sencha app watch modern
    sencha app watch classic

#### 生成代码

    sencha generate view myApp.MyView
    sencha generate model MyModel id:int,fname,lname
    sencha generate controller MyController

#### 更新应用

    sencha app upgrade [path-to-new-framework]
    

### Ext JS调试

Firefox的Illumination或者Chrome的App Inspector

https://fiddle.sencha.com

## 核心概念

### 类机制

* Ext
* Ext.Base
* Ext.Class
* Ext.ClassManager
* Ext.Loader

#### Ext

全局单例对象包装了Sencha库所有的类，单例s,　工具方法。许多工具函数定义在Ext.

一些方法和属性：

**application**

很多应用程序通过Ext.application初始化。该函数加载Ext.app.Application类，通过提供的配置参数在页面加载完成后启动。

Ext.app.Application是呈现整个应用的主要类。

    Ext.application({
        name: 'MyApp',
        extend: 'MyApp.Application',
        launch: function() {
        
        }
    });

该代码创建了MyApp全局变量。

**define**

创建或者覆盖一个类，接收三个参数，name为类名字，data是类属性，可选的callback在类创建后会调用

    Ext.define(name, data, callback)

以下代码创建了Car类

    Ext.define('Car', {
      name: null,
      constructor: function(name) {
        if (name) {
          this.name = name;
        }
      },
      start: function() {
        alert("Car started");
      }
    });
    
你也可以使用define来继承一个类

    Ext.define('ElectricCar', {
      extend: 'Car',
      start: function() {
        alert("Electric car started");
      }
    });
    
如果你向替换基类的实现，你也可以使用Ext.define来覆盖方法

    Ext.define('My.ux.field.Text', {
      override: 'Ext.form.field.Text',
      setValue: function(val) {
        this.callParent(['In override']);
        return this;
      }
    });
    
也可以创建一个单例类

    Ext.define('Logger', {
      singleton: true,
      log: function(msg) {
        console.log(msg);
      }
    });
    
**create**

创建类实例

    Ext.create(Class, Options);
    
    var myCar = Ext.create('ElectricCar', {
        name: 'MyElectricCar'
    });
    
如果Ext.loader开启，那么Ext.create使用的类会被自动加载

**onReady**

该方法在页面加载后执行

    Ext.onReady(function() {
        new Ext.Component({
            renderTo: document.body,
            html: 'Dom ready!'
        });
    });
    
**widget**

定义类时，你可以提供短别名。例如Ext.panel.Panel有widget.panel.

    Ext.create('Ext.panel.Panel', {
        renderTo: Ext.getBody(),
        title: 'Panel'
      });

    Ext.widget('panel', {    
        renderTo: Ext.getBody(),
        title: 'Panel'
      });

    Ext.create('widget.panel', {
        renderTo: Ext.getBody(),
        title: 'Panel'
      });
      
**getClass**

返回对象类

**getClassName**

返回对象类名

**Ext.Base**

所有Ext类的基类

**Ext.Class**

用来Ext.ClassManager创建类的底层工厂类

**Ext.ClassManager**

管理所有类，维护字符串到实际类对象映射

**Ext.Loader**

动态依赖加载

    Ext.require(['widget.window', 'layout.border', 'Ext.data.Connection']);
    Ext.require(['widget.*', 'layout.*', 'Ext.data.*');
    Ext.exclude('Ext.data.*').require('*');
    
    
#### Events

event可以是用户行为，Ajax响应等

##### 添加listener

    Ext.create('Ext.Button', {
        renderTo: Ext.getBody(),
        listeners: {
            click: function() {
                Ext.Msg.alert("Button clicked!");
            }
        }
    });
    
添加多个events

    Ext.create('Ext.Button', {
        renderTo: Ext.getBody(),
        listeners: {
            mouseout: function() {
              	// Do something  
            },
            click: function() {
                // Do something
            }
        }
    });
    
    
你也可以在实例创建后使用on方法来添加listener

    var button = Ext.create('Ext.button');
    
    button.on('click', function() {
        // Do something
    });
    
也可以使用on添加多个listeners

    var button = Ext.create('Ext.button');
    
    button.on({
        mouseover: function() {
            // Do something
        },
        mouseover: function() {
            // Do something
        }
    });
    
##### 移除listeners

    var HandleClick = function() {
        Ext.Msg.alert("My Button clicked!");
    }
    
    Ext.create('Ext.Button', {
        listeners: {
            click: HandleClick
        }
    });
    
    button.un("click", HandleClick);
    
##### DOM节点事件处理
    
    <div id="mydiv"></div>

    var div = Ext.get("mydiv");
    
    div.on("click", function(e, t, eOpts) {
        // Do something
    });

#### 访问DOM

三种方法访问DOM元素：get, query 和 select


##### Ext.get

以下返回Ext.dom.Element

    var mydiv = Ext.get("myDivId");
    
##### Ext.query

返回array

    var someNodes = Ext.query(".oddRow", myCustomComponent.getEl().dom);
    
##### Ext.select

支持CSS/XPath, 返回CompositeElement，是元素集合

    var rows = Ext.select('div.row');
    rows.setWidth(100);  // 设置元素为100宽
 
** 多选择 **

    Ext.select('div.row, span.title')
    
** 更换搜索基准节点 **

    Ext.get('myEl').select('div.row‘)
    
    // or
    
    Ext.select('div.row', true, 'myEl');

##### Ext.ComponentQuery

通过ID, xtype和属性来搜索component

    Ext.ComponentQuery.query('button')
    
    Ext.ComponentQuery.query(’#foo')
    
    Ext.ComponentQuery.query("button[title='my button']");
    // or
    parent.query('textfield[title=my button]');
    
也可以使用嵌套选择

    Ext.ComponentQuery.query('formpanel numberfield');
    
    parent.child('button[itemId=save]');
    
当然你也可以使用**nextNode**, **up**, **down**, **previousSibiling**

#### Components, containers, 和layouts

##### Components

如button, label, 复杂控件，例如 Tree Panel, Grids等。派生自**Ext.Component**，提供了创建，修改大小，呈现，排列功能。

所有components都有**xtype**属性。允许延迟加载.

##### Containers

用来存放其他components,　Ext.container.Container是所有containers基类

Ext.toolbar.Toolbar, Ext.panel.Panel, 和 Ext.Editor为内建Components，可以包含其他components，
Ext.button.Button非派生自Ext.container.Container，不能包含其他components

    Ext.create('Ext.panel.Panel', {
      renderTo     : Ext.getBody(),
      width        : 700,
      height       : 400,
      items: [
      {
        xtype: 'panel',
        title: 'Panel 1',
      },
      {
        xtype: 'panel',
        title: 'Panel 2',
        height: 200,
        items: [
        {
          xtype: 'button',
          text: 'Click Me'
        }
        ]
      },
      {
        xtype: 'panel',
        title: 'Panel 3',
        width: 150,
        height: 100,
      }
      ]
    });

##### Layouts

layout用来定义components位置和大小，所有的container都由个layout,　默认是auto.

使用column时你可以指定columnWidth，所有的columnWidth之和应该等于１．也可以指定固定宽度。例如width: 150,　那么剩余宽度
使用columnWidth时继续使用1作为分配
    
    Ext.create('Ext.panel.Panel', {
      renderTo     : Ext.getBody(),
      width        : 700,
      height       : 400,
      layout　   : 'column',
      items: [
      {
        xtype: 'panel',
        title: 'Panel 1',
          columnWidth: 0.4,
          height: 400,
      },
      {
        xtype: 'panel',
        title: 'Panel 2',
          layout: 'center',
        columnWidth: 0.6,
        height: 400,
        items: [
        {
          xtype: 'button',
          text: 'Click Me'
        }
        ]
      },
      {
        xtype: 'panel',
        title: 'Panel 3',
        width: 150,
        height: 400,
      }
      ]
    });
    
**updateLayout**

Ext.contaner.Container方法。用来从新设置子components布局

**suspendLayout**

大部分你都不会直接调用updateLayout，这会在你改变大小或者移除子控件时自动调用，你可能想让它保持，然后自己手动调用updateLayout方法，
通过设置suspendLayout为true来实现

你也可以通过Ext.suspendLayouts()来对整个框架配置。并且使用Ext.resumeLayouts(true)来更新所有

Ext JS内建如下layouts

* absolute
* accordion
* anchor
* card
* center
* column
* fit
* hbox
* table
* vbox


**absolute**

通过x,y属性定义绝对位置
    
    Ext.create('Ext.panel.Panel', {
        renderTo: Ext.getBody(),
        width: 700,
        height: 400,
        layout: 'absolute',
        items: [
      {
        xtype: 'panel',
        title: 'Panel 1',
        x: 12,
        y: 20,
        height: 250,
      },
      {
        xtype: 'panel',
        title: 'Panel 2',
        x: 200,
        y: 150,
        height: 200,
      },
      {
        xtype: 'panel',
        title: 'Panel 3',
        x: 400,
        y: 250,
        width: 150,
        height: 100,
      }
      ]
    });
    
**accordion**

展开选项卡，同时只能出一个

    Ext.create('Ext.panel.Panel', {
      renderTo     : Ext.getBody(),
      width        : 700,
      height       : 400,
      layout       : 'accordion',
      items: [
      {
        title: 'Item 1',
        html: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum'
      },
      {
        title: 'Item 2',
        html: 'some content here'
      },
      {
        title: 'Item 3',
        html: 'empty'
      }
      ]
    });

**anchor**

只对相对container相对大小


    Ext.create('Ext.panel.Panel', {
      renderTo     : Ext.getBody(),
      width        : 700,
      height       : 400,
      layout       : 'anchor',
      items: [
      {
        title: 'Item 1',
        html: 'Item 1',
        anchor: '50%'
      },
      {
        title: 'Item 2',
        html: 'Item 2',
        anchor: '-20 -200'
      },
      {
        title: 'Item 3',
        html: 'Item 3',
        anchor: '-200'
      }
      ]
    });
    
**border**

指定子components放置区域，例如center, north, south, west, 和east，你必须有一个component为center

    Ext.create('Ext.panel.Panel', {
      renderTo     : Ext.getBody(),
      width        : 700,
      height       : 400,
      layout       : 'border',
      items: [
      {
        title: 'Item 1',
        html: 'Item 1',
        region: 'center'
      },
      {
        title: 'Item 2',
        html: 'Item 2',
        region: 'east',
        width: 200
      },
      {
        title: 'Item 3',
        html: 'Item 3',
        region: 'south',
        height: 100
      }
      ]
    });

**card**

只有一个子component显示，填充整个container,用在wizard和tabs

    Ext.create('Ext.panel.Panel', {
      renderTo     : Ext.getBody(),
      width        : 700,
      height       : 400,
      layout       : 'card',
      defaultListenerScope: true,
      bbar: ['->',
      {
        itemId: 'btn-prev',
        text: 'Previous',
        handler: 'showPrevious',
        disabled: true
      },
      {
        itemId: 'btn-next',
        text: 'Next',
        handler: 'showNext'
      }
      ],
      items: [
      {
        index: 0,
        title: 'Item 1',
        html: 'Item 1'
      },
      {
        index: 1,
        title: 'Item 2',
        html: 'Item 2'
      },
      {
        index:2,
        title: 'Item 3',
        html: 'Item 3'
      }
      ],
      showNext: function () {
        this.navigate(1);
      },
      
      showPrevious: function () {
        this.navigate(-1);
      },
      navigate: function (incr) {
        var layout = this.getLayout();
        var index = layout.activeItem.index + incr;
        layout.setActiveItem(index);
        
        this.down('#btn-prev').setDisabled(index===0);
        this.down('#btn-next').setDisabled(index===2);
      }
    });
    
**center**

放在container中间

**column**

通过column来布局

**fit**

子component填充整个container

    Ext.create('Ext.panel.Panel', {
      renderTo     : Ext.getBody(),
      width        : 700,
      height       : 400,
      layout       : 'fit',
      bodyPadding: 20,
      items: [
      {
        title: 'Item 1',
        html: 'Fills the container',
      }
      ]
    });
    
我们还用了bodyPadding来设置内边距

**hbox**

和column相似，但是可以固定高度,flex选项可以配置相对宽度比例

    Ext.create('Ext.panel.Panel', {
      renderTo     : Ext.getBody(),
      width        : 700,
      height       : 400,
      layout       :
      {
        type: 'hbox',
        pack: 'start',
        align: 'stretch',
      },
      items: [
      {
        title: 'Item 1',
        html: 'Item 1',
        flex: 1
      },
      {
        title: 'Item 2',
        html: 'Item 2',
        width: 100
      },
      {
        title: 'Item 3',
        html: 'Item 3',
        flex: 2
      }
      ]
    });
    
**table**

呈现为表格格式，可以通过rowspan和colspan来设置多行列

    Ext.create('Ext.panel.Panel', {
      renderTo     : Ext.getBody(),
      width        : 700,
      height       : 400,
      layout       :
      {
        type: 'table',
        columns: 3,
        tableAttrs: {
          style: {
            width: '100%'
        }
        }
      },
      items: [
      {
        rowspan: 3,
        title: 'Item 1',
        html: 'Item 1'
      },
      {
        title: 'Item 2',
        html: 'Item 2'
      },
      {
        title: 'Item 3',
        rowspan: 2,
        html: 'Item 3'
      },
      {
        title: 'Item 4',
        html: 'Item 4'
      },
      {
        title: 'Item 5',
        html: 'Item 5'
      },
      {
        title: 'Item 6',
        html: 'Item 6'
      },
      {
        title: 'Item 7',
        html: 'Item 7'
      }
      ]
    });
    
**vbox**

垂直布局

    Ext.create('Ext.panel.Panel', {
      renderTo     : Ext.getBody(),
      width        : 700,
      height       : 400,
      layout       :
      {
        type: 'vbox',
        pack: 'start',
        align: 'stretch',
      },
      items: [
      {
        title: 'Item 1',
        html: 'Item 1',
        flex: 1
      },
      {
        title: 'Item 2',
        html: 'Item 2',
        height: 100
      },
      {
        title: 'Item 3',
        html: 'Item 3',
        flex: 2
      }
      ]
    });